{"version":3,"sources":["Cell.js","Board.js","index.js"],"names":["Cell","value","this","props","isRevealed","isMine","neighbour","isFlagged","_this$props","onClick","cMenu","className","react_default","a","createElement","onContextMenu","getValue","React","Component","Board","state","boardData","_this","initBoardData","height","width","mines","gameStatus","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","isEmpty","randomx","randomy","minesPlanted","getRandomNumber","_this2","updatedData","mine","traverseBoard","el","setState","_this3","revealEmpty","revealBoard","alert","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","_this4","key","Cell_Cell","handleCellClick","handleContextMenu","renderBoard","Game","_this$state","Board_Board","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.b2b70176.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Cell extends React.Component {\n  getValue() {\n    const { value } = this.props;\n\n    if (!value.isRevealed) {\n      return this.props.value.isFlagged ? \"ðŸš©\" : null;\n    }\n    if (value.isMine) {\n      return \"ðŸ’£\";\n    }\n    if (value.neighbour === 0) {\n      return null;\n    }\n    return value.neighbour;\n  }\n\n  render() {\n    const { value, onClick, cMenu } = this.props;\n    let className =\n      \"cell\" +\n      (value.isRevealed ? \"\" : \" hidden\") +\n      (value.isMine ? \" is-mine\" : \"\") +\n      (value.isFlagged ? \" is-flag\" : \"\");\n\n    return (\n      <div\n        onClick={onClick}\n        className={className}\n        onContextMenu={cMenu}\n      >\n        {this.getValue()}\n      </div>\n    );\n  }\n}\n\nconst cellItemShape = {\n    isRevealed: PropTypes.bool,\n    isMine: PropTypes.bool,\n    isFlagged: PropTypes.bool\n}\n\nCell.propTypes = {\n  value: PropTypes.objectOf(PropTypes.shape(cellItemShape)),\n  onClick: PropTypes.func,\n  cMenu: PropTypes.func\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\n\nexport default class Board extends React.Component {\n  state = {\n    boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n    gameStatus: \"Game in progress\",\n    mineCount: this.props.mines,\n  };\n\n  /* Helper Functions */\n\n  // get mines\n  getMines(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isMine) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Flags\n  getFlags(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isFlagged) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Hidden cells\n  getHidden(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (!dataitem.isRevealed) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get random number given a dimension\n  getRandomNumber(dimension) {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\n  }\n\n  // Gets initial board data\n  initBoardData(height, width, mines) {\n    let data = this.createEmptyArray(height, width);\n    data = this.plantMines(data, height, width, mines);\n    data = this.getNeighbours(data, height, width);\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false,\n        };\n      }\n    }\n    return data;\n  }\n\n  // plant mines on the board\n  plantMines(data, height, width, mines) {\n    let randomx, randomy, minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n      randomx = this.getRandomNumber(width);\n      randomy = this.getRandomNumber(height);\n      if (!(data[randomx][randomy].isMine)) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return (data);\n  }\n\n  // get number of neighbouring mines for each board cell\n  getNeighbours(data, height, width) {\n    let updatedData = data, index = 0;\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (data[i][j].isMine !== true) {\n          let mine = 0;\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n          area.map(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n          if (mine === 0) {\n            updatedData[i][j].isEmpty = true;\n          }\n          updatedData[i][j].neighbour = mine;\n        }\n      }\n    }\n\n    return (updatedData);\n  };\n\n  // looks for neighbouring cells and returns them\n  traverseBoard(x, y, data) {\n    const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n\n  // reveals the whole board\n  revealBoard() {\n    let updatedData = this.state.boardData;\n    updatedData.map((datarow) => {\n      datarow.map((dataitem) => {\n        dataitem.isRevealed = true;\n      });\n    });\n    this.setState({\n      boardData: updatedData\n    })\n  }\n\n  /* reveal logic for empty cell */\n  revealEmpty(x, y, data) {\n    let area = this.traverseBoard(x, y, data);\n    area.map(value => {\n      if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n        data[value.x][value.y].isRevealed = true;\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n        }\n      }\n    });\n    return data;\n\n  }\n\n  // Handle User Events\n\n  handleCellClick(x, y) {\n\n    // check if revealed. return if true.\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n    // check if mine. game over if true\n    if (this.state.boardData[x][y].isMine) {\n      this.setState({ gameStatus: \"You Lost.\" });\n      this.revealBoard();\n      alert(\"game over\");\n    }\n\n    let updatedData = this.state.boardData;\n    updatedData[x][y].isFlagged = false;\n    updatedData[x][y].isRevealed = true;\n\n    if (updatedData[x][y].isEmpty) {\n      updatedData = this.revealEmpty(x, y, updatedData);\n    }\n\n    if (this.getHidden(updatedData).length === this.props.mines) {\n      this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n      this.revealBoard();\n      alert(\"You Win\");\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: this.props.mines - this.getFlags(updatedData).length,\n    });\n  }\n\n  handleContextMenu(e, x, y) {\n    e.preventDefault();\n    let updatedData = this.state.boardData;\n    let mines = this.state.mineCount;\n\n    // check if already revealed\n    if (updatedData[x][y].isRevealed) return;\n\n    if (updatedData[x][y].isFlagged) {\n      updatedData[x][y].isFlagged = false;\n      mines++;\n    } else {\n      updatedData[x][y].isFlagged = true;\n      mines--;\n    }\n\n    if (mines === 0) {\n      const mineArray = this.getMines(updatedData);\n      const FlagArray = this.getFlags(updatedData);\n      if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n        this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n        this.revealBoard();\n        alert(\"You Win\");\n      }\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: mines,\n    });\n  }\n\n  renderBoard(data) {\n    return data.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return (\n          <div key={dataitem.x * datarow.length + dataitem.y}>\n            <Cell\n              onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n              cMenu={(e) => this.handleContextMenu(e, dataitem.x, dataitem.y)}\n              value={dataitem}\n            />\n            {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n          </div>);\n      })\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n          <h1 className=\"info\">{this.state.gameStatus}</h1>\n        </div>\n        {\n          this.renderBoard(this.state.boardData)\n        }\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  mines: PropTypes.number,\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './Board';\nimport './style.scss';\n\nclass Game extends React.Component {\n  state = {\n    height: 8,\n    width: 8,\n    mines: 10\n  };\n\n  render() {\n    const { height, width, mines } = this.state;\n    return (\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}